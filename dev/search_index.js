var documenterSearchIndex = {"docs":
[{"location":"#PORTA.jl-1","page":"Home","title":"PORTA.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"warning: Warning\nUnder Development","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [PORTA]","category":"page"},{"location":"#PORTA.PORTA","page":"Home","title":"PORTA.PORTA","text":"Main module of PORTA.jl. This package provides an interface to the PORTA software. Exposed PORTA methods are named historically.\n\nThe compiled PORTA binaries are accessed through PORTA_jll.jl\n\nFile I/O: The compiled PORTA binaries read/write to files. By default the directory ./porta_tmp is used.\n\n\n\n\n\n","category":"module"},{"location":"#PORTA.PortaMatrix","page":"Home","title":"PORTA.PortaMatrix","text":"PORTA methods accept integer or rational valued matrices. The PortaMatrix type simplifies notation.\n\nPortaMatrix = Union{Matrix{Int64}, Matrix{Rational{Int64}}}\n\n\n\n\n\n","category":"constant"},{"location":"#PORTA.IEQ","page":"Home","title":"PORTA.IEQ","text":"The intersecting halfspaces representation of a polyhedron. This struct is analogous to PORTA files with the .ieq extension. Constructor arguments are optional.\n\nIEQ(;\n    inequalities :: PortaMatrix,\n    equalities :: PortaMatrix,\n    lower_bounds :: PortaMatrix,\n    upper_bounds :: PortaMatrix,\n    elimination_order :: PortaMatrix,\n    valid :: PortaMatrix\n)\n\nThe IEQ struct can be initialized with either Rational{Int64} or Int64 valued matrices. On construction, all matrix values are standardized. By default matrix elements are Int64, if one field has Rational{Int64} values then the entire IEQ struct will be converted to type Rational{Int64}.\n\nConstructor arguments inequalities and equalities each represent a linear system of the following form.\n\nbeginbmatrix alpha_11  dots  alpha_1M  vdots  ddots  vdots  alpha_N1  dots  alpha_NM endbmatrix leq text or  = beginbmatrix beta_1  vdots  beta_N endbmatrix\n\nEach matrix row is populated by a vector vecalpha with length M denoting the left hand side of the above equation. The right hand side of the in/equality, beta_i, is the last element of the inequalities and equalities matrices. The resulting matrix has M+1 columns to capture both alpha and beta.\n\nIEQ Fields:\n\ninequalities: each matrix row is a linear inequality, the first M elements indexed 1:(end-1) are α ad the last element indexed end is β.\nequalities: each matrix row is linear equality, the first M elements indexed 1:(end-1) are α ad the last element indexed end is β.\nlower_bounds: each matrix row is a lower bound for enumerating integral points with vint.\nupper_bounds: each matrix row is an upper bound for enumerating integral points with vint.\nvalid: a feasible point for the linear system.\ndim: the dimension of in/equalities, upper/lower bounds, etc. This field is auto-populated on construction.\n\nA DomainError is thrown if the column dimension of fields is not equal.\n\n\n\n\n\n","category":"type"},{"location":"#PORTA.POI","page":"Home","title":"PORTA.POI","text":"The vertex representation of a polyhedron. This struct is analogous to PORTA files with the .poi extension. Constructor arguments are optional.\n\nPOI(;vertices::PortaMatrix, rays::PortaMatrix)\n\nPOI Fields:\n\nconv_section: each matrix row is a vertex.\ncone_section: each matrix row is a ray.\nvalid:  a feasible point for the vertex representation.\ndim: Int64, the dimension of vertices and rays. This field is auto-populated on construction.\n\nA DomainError is thrown if the column dimension of rays and vertices is not equal.\n\n\n\n\n\n","category":"type"},{"location":"#PORTA.cleanup_porta_tmp-Tuple{}","page":"Home","title":"PORTA.cleanup_porta_tmp","text":"cleanup_porta_tmp( dir::String = \"./\")\n\nRecursively removes porta_tmp/ from directory dir.\n\nwarning: Warning\nThis method uses rm(\"<dir/>porta_tmp/\", force=true, recursive=true). Make sure not to delete important data.\n\n\n\n\n\n","category":"method"},{"location":"#PORTA.make_tmp_dir-Tuple{}","page":"Home","title":"PORTA.make_tmp_dir","text":"make_tmp_dir( dir::String = \"./\", tmp_dir::String = \"porta_tmp\") :: String\n\nCreates the tmp_dir directory within dir and return the tmp_dir path. By default, the created directory is ./porta_tmp.\n\n\n\n\n\n","category":"method"},{"location":"#PORTA.read_ieq-Tuple{String}","page":"Home","title":"PORTA.read_ieq","text":"read_ieq( filepath::String ) :: IEQ{Rational{Int64}}\n\nCreates an IEQ struct by parsing the provided .ieq file. A DomainError is thrown if argument filepath does not end with the .ieq extension.\n\n\n\n\n\n","category":"method"},{"location":"#PORTA.read_poi-Tuple{String}","page":"Home","title":"PORTA.read_poi","text":"read_poi( filepath::String ) :: POI{Rational{Int64}}\n\nCreates a POI struct by parsing the provided .poi file. A DomainError is thrown if argument filepath does not end with the .poi extension.\n\n\n\n\n\n","category":"method"},{"location":"#PORTA.run_xporta-Tuple{String,String}","page":"Home","title":"PORTA.run_xporta","text":"run_xporta( method_flag::String, args::String; suppress::Bool = true)\n\nwarning: Warning\nThis method is intended for advanced use of the xporta binaries. User knowledge of flags and arguments is required for successful execution.\n\nRuns the xporta binary through PORTA_jll. The method_flag argument tells the xporta binary which submethod to call. Valid options include:\n\n\"-D\" runs the dim method\n\"-F\" runs the fmel method\n\"-S\" runs the portsort method\n\"-T\" runs the traf method\n\nThe args parameter is uniquely specified by submethod, for more information regarding methods see the PORTA documentation.\n\n\n\n\n\n","category":"method"}]
}
